/* tslint:disable */
/* eslint-disable */
/**
 * PortIQ API
 * PortIQ API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Certificate,
  PatchedCertificate,
  PatchedUser,
  User,
} from '../models/index';
import {
    CertificateFromJSON,
    CertificateToJSON,
    PatchedCertificateFromJSON,
    PatchedCertificateToJSON,
    PatchedUserFromJSON,
    PatchedUserToJSON,
    UserFromJSON,
    UserToJSON,
} from '../models/index';

export interface ApiCertificateCreateRequest {
    certificate: Omit<Certificate, 'id'|'created_at'>;
}

export interface ApiCertificateDestroyRequest {
    id: number;
}

export interface ApiCertificatePartialUpdateRequest {
    id: number;
    patchedCertificate?: Omit<PatchedCertificate, 'id'|'created_at'>;
}

export interface ApiCertificateRetrieveRequest {
    id: number;
}

export interface ApiCertificateUpdateRequest {
    id: number;
    certificate: Omit<Certificate, 'id'|'created_at'>;
}

export interface ApiCertificateUserCertificatesRetrieveRequest {
    userId: string;
}

export interface ApiUserCreateRequest {
    user: Omit<User, 'id'|'created_at'>;
}

export interface ApiUserDestroyRequest {
    id: number;
}

export interface ApiUserPartialUpdateRequest {
    id: number;
    patchedUser?: Omit<PatchedUser, 'id'|'created_at'>;
}

export interface ApiUserRetrieveRequest {
    id: number;
}

export interface ApiUserUpdateRequest {
    id: number;
    user: Omit<User, 'id'|'created_at'>;
}

/**
 * 
 */
export class ApiApi extends runtime.BaseAPI {

    /**
     */
    async apiCertificateCreateRaw(requestParameters: ApiCertificateCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Certificate>> {
        if (requestParameters['certificate'] == null) {
            throw new runtime.RequiredError(
                'certificate',
                'Required parameter "certificate" was null or undefined when calling apiCertificateCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/certificate/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CertificateToJSON(requestParameters['certificate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CertificateFromJSON(jsonValue));
    }

    /**
     */
    async apiCertificateCreate(requestParameters: ApiCertificateCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Certificate> {
        const response = await this.apiCertificateCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiCertificateDestroyRaw(requestParameters: ApiCertificateDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiCertificateDestroy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/certificate/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiCertificateDestroy(requestParameters: ApiCertificateDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiCertificateDestroyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiCertificateListRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Certificate>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/certificate/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CertificateFromJSON));
    }

    /**
     */
    async apiCertificateList(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Certificate>> {
        const response = await this.apiCertificateListRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async apiCertificatePartialUpdateRaw(requestParameters: ApiCertificatePartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Certificate>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiCertificatePartialUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/certificate/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedCertificateToJSON(requestParameters['patchedCertificate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CertificateFromJSON(jsonValue));
    }

    /**
     */
    async apiCertificatePartialUpdate(requestParameters: ApiCertificatePartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Certificate> {
        const response = await this.apiCertificatePartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiCertificateRetrieveRaw(requestParameters: ApiCertificateRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Certificate>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiCertificateRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/certificate/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CertificateFromJSON(jsonValue));
    }

    /**
     */
    async apiCertificateRetrieve(requestParameters: ApiCertificateRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Certificate> {
        const response = await this.apiCertificateRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiCertificateUpdateRaw(requestParameters: ApiCertificateUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Certificate>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiCertificateUpdate().'
            );
        }

        if (requestParameters['certificate'] == null) {
            throw new runtime.RequiredError(
                'certificate',
                'Required parameter "certificate" was null or undefined when calling apiCertificateUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/certificate/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CertificateToJSON(requestParameters['certificate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CertificateFromJSON(jsonValue));
    }

    /**
     */
    async apiCertificateUpdate(requestParameters: ApiCertificateUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Certificate> {
        const response = await this.apiCertificateUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiCertificateUserCertificatesRetrieveRaw(requestParameters: ApiCertificateUserCertificatesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Certificate>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling apiCertificateUserCertificatesRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/certificate/{user_id}/user-certificates/`.replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CertificateFromJSON(jsonValue));
    }

    /**
     */
    async apiCertificateUserCertificatesRetrieve(requestParameters: ApiCertificateUserCertificatesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Certificate> {
        const response = await this.apiCertificateUserCertificatesRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiUserCreateRaw(requestParameters: ApiUserCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<User>> {
        if (requestParameters['user'] == null) {
            throw new runtime.RequiredError(
                'user',
                'Required parameter "user" was null or undefined when calling apiUserCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/user/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UserToJSON(requestParameters['user']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserFromJSON(jsonValue));
    }

    /**
     */
    async apiUserCreate(requestParameters: ApiUserCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<User> {
        const response = await this.apiUserCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiUserDestroyRaw(requestParameters: ApiUserDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiUserDestroy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/user/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiUserDestroy(requestParameters: ApiUserDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiUserDestroyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiUserListRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<User>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/user/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UserFromJSON));
    }

    /**
     */
    async apiUserList(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<User>> {
        const response = await this.apiUserListRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async apiUserPartialUpdateRaw(requestParameters: ApiUserPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<User>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiUserPartialUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/user/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedUserToJSON(requestParameters['patchedUser']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserFromJSON(jsonValue));
    }

    /**
     */
    async apiUserPartialUpdate(requestParameters: ApiUserPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<User> {
        const response = await this.apiUserPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiUserRetrieveRaw(requestParameters: ApiUserRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<User>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiUserRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/user/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserFromJSON(jsonValue));
    }

    /**
     */
    async apiUserRetrieve(requestParameters: ApiUserRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<User> {
        const response = await this.apiUserRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiUserUpdateRaw(requestParameters: ApiUserUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<User>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiUserUpdate().'
            );
        }

        if (requestParameters['user'] == null) {
            throw new runtime.RequiredError(
                'user',
                'Required parameter "user" was null or undefined when calling apiUserUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/user/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UserToJSON(requestParameters['user']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserFromJSON(jsonValue));
    }

    /**
     */
    async apiUserUpdate(requestParameters: ApiUserUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<User> {
        const response = await this.apiUserUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
