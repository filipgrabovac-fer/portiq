/* tslint:disable */
/* eslint-disable */
/**
 * PortIQ API
 * PortIQ API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Certificate,
  PatchedCertificate,
} from '../models/index';
import {
    CertificateFromJSON,
    CertificateToJSON,
    PatchedCertificateFromJSON,
    PatchedCertificateToJSON,
} from '../models/index';

export interface CertificateCreateRequest {
    certificate: Omit<Certificate, 'created_at'>;
}

export interface CertificateDestroyRequest {
    idCertificate: number;
}

export interface CertificatePartialUpdateRequest {
    idCertificate: number;
    patchedCertificate?: Omit<PatchedCertificate, 'created_at'>;
}

export interface CertificateRetrieveRequest {
    idCertificate: number;
}

export interface CertificateUpdateRequest {
    idCertificate: number;
    certificate: Omit<Certificate, 'created_at'>;
}

export interface CertificateUserCertificatesRetrieveRequest {
    userId: string;
}

/**
 * 
 */
export class CertificateApi extends runtime.BaseAPI {

    /**
     */
    async certificateCreateRaw(requestParameters: CertificateCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Certificate>> {
        if (requestParameters['certificate'] == null) {
            throw new runtime.RequiredError(
                'certificate',
                'Required parameter "certificate" was null or undefined when calling certificateCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/certificate/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CertificateToJSON(requestParameters['certificate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CertificateFromJSON(jsonValue));
    }

    /**
     */
    async certificateCreate(requestParameters: CertificateCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Certificate> {
        const response = await this.certificateCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async certificateDestroyRaw(requestParameters: CertificateDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['idCertificate'] == null) {
            throw new runtime.RequiredError(
                'idCertificate',
                'Required parameter "idCertificate" was null or undefined when calling certificateDestroy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/certificate/{id_certificate}/`.replace(`{${"id_certificate"}}`, encodeURIComponent(String(requestParameters['idCertificate']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async certificateDestroy(requestParameters: CertificateDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.certificateDestroyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async certificateListRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Certificate>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/certificate/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CertificateFromJSON));
    }

    /**
     */
    async certificateList(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Certificate>> {
        const response = await this.certificateListRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async certificatePartialUpdateRaw(requestParameters: CertificatePartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Certificate>> {
        if (requestParameters['idCertificate'] == null) {
            throw new runtime.RequiredError(
                'idCertificate',
                'Required parameter "idCertificate" was null or undefined when calling certificatePartialUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/certificate/{id_certificate}/`.replace(`{${"id_certificate"}}`, encodeURIComponent(String(requestParameters['idCertificate']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedCertificateToJSON(requestParameters['patchedCertificate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CertificateFromJSON(jsonValue));
    }

    /**
     */
    async certificatePartialUpdate(requestParameters: CertificatePartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Certificate> {
        const response = await this.certificatePartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async certificateRetrieveRaw(requestParameters: CertificateRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Certificate>> {
        if (requestParameters['idCertificate'] == null) {
            throw new runtime.RequiredError(
                'idCertificate',
                'Required parameter "idCertificate" was null or undefined when calling certificateRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/certificate/{id_certificate}/`.replace(`{${"id_certificate"}}`, encodeURIComponent(String(requestParameters['idCertificate']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CertificateFromJSON(jsonValue));
    }

    /**
     */
    async certificateRetrieve(requestParameters: CertificateRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Certificate> {
        const response = await this.certificateRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async certificateUpdateRaw(requestParameters: CertificateUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Certificate>> {
        if (requestParameters['idCertificate'] == null) {
            throw new runtime.RequiredError(
                'idCertificate',
                'Required parameter "idCertificate" was null or undefined when calling certificateUpdate().'
            );
        }

        if (requestParameters['certificate'] == null) {
            throw new runtime.RequiredError(
                'certificate',
                'Required parameter "certificate" was null or undefined when calling certificateUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/certificate/{id_certificate}/`.replace(`{${"id_certificate"}}`, encodeURIComponent(String(requestParameters['idCertificate']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CertificateToJSON(requestParameters['certificate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CertificateFromJSON(jsonValue));
    }

    /**
     */
    async certificateUpdate(requestParameters: CertificateUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Certificate> {
        const response = await this.certificateUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async certificateUserCertificatesRetrieveRaw(requestParameters: CertificateUserCertificatesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Certificate>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling certificateUserCertificatesRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/certificate/{user_id}/user-certificates/`.replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CertificateFromJSON(jsonValue));
    }

    /**
     */
    async certificateUserCertificatesRetrieve(requestParameters: CertificateUserCertificatesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Certificate> {
        const response = await this.certificateUserCertificatesRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
