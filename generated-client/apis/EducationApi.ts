/* tslint:disable */
/* eslint-disable */
/**
 * PortIQ API
 * PortIQ API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Education,
  PatchedEducation,
} from '../models/index';
import {
    EducationFromJSON,
    EducationToJSON,
    PatchedEducationFromJSON,
    PatchedEducationToJSON,
} from '../models/index';

export interface EducationCreateRequest {
    education: Omit<Education, 'id_education'|'created_at'>;
}

export interface EducationDestroyRequest {
    idEducation: number;
}

export interface EducationPartialUpdateRequest {
    idEducation: number;
    patchedEducation?: Omit<PatchedEducation, 'id_education'|'created_at'>;
}

export interface EducationRetrieveRequest {
    idEducation: number;
}

export interface EducationUpdateRequest {
    idEducation: number;
    education: Omit<Education, 'id_education'|'created_at'>;
}

/**
 * 
 */
export class EducationApi extends runtime.BaseAPI {

    /**
     */
    async educationCreateRaw(requestParameters: EducationCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Education>> {
        if (requestParameters['education'] == null) {
            throw new runtime.RequiredError(
                'education',
                'Required parameter "education" was null or undefined when calling educationCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/education/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EducationToJSON(requestParameters['education']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EducationFromJSON(jsonValue));
    }

    /**
     */
    async educationCreate(requestParameters: EducationCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Education> {
        const response = await this.educationCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async educationDestroyRaw(requestParameters: EducationDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['idEducation'] == null) {
            throw new runtime.RequiredError(
                'idEducation',
                'Required parameter "idEducation" was null or undefined when calling educationDestroy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/education/{id_education}/`.replace(`{${"id_education"}}`, encodeURIComponent(String(requestParameters['idEducation']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async educationDestroy(requestParameters: EducationDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.educationDestroyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async educationListRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Education>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/education/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EducationFromJSON));
    }

    /**
     */
    async educationList(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Education>> {
        const response = await this.educationListRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async educationPartialUpdateRaw(requestParameters: EducationPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Education>> {
        if (requestParameters['idEducation'] == null) {
            throw new runtime.RequiredError(
                'idEducation',
                'Required parameter "idEducation" was null or undefined when calling educationPartialUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/education/{id_education}/`.replace(`{${"id_education"}}`, encodeURIComponent(String(requestParameters['idEducation']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedEducationToJSON(requestParameters['patchedEducation']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EducationFromJSON(jsonValue));
    }

    /**
     */
    async educationPartialUpdate(requestParameters: EducationPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Education> {
        const response = await this.educationPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async educationRetrieveRaw(requestParameters: EducationRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Education>> {
        if (requestParameters['idEducation'] == null) {
            throw new runtime.RequiredError(
                'idEducation',
                'Required parameter "idEducation" was null or undefined when calling educationRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/education/{id_education}/`.replace(`{${"id_education"}}`, encodeURIComponent(String(requestParameters['idEducation']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EducationFromJSON(jsonValue));
    }

    /**
     */
    async educationRetrieve(requestParameters: EducationRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Education> {
        const response = await this.educationRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async educationUpdateRaw(requestParameters: EducationUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Education>> {
        if (requestParameters['idEducation'] == null) {
            throw new runtime.RequiredError(
                'idEducation',
                'Required parameter "idEducation" was null or undefined when calling educationUpdate().'
            );
        }

        if (requestParameters['education'] == null) {
            throw new runtime.RequiredError(
                'education',
                'Required parameter "education" was null or undefined when calling educationUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/education/{id_education}/`.replace(`{${"id_education"}}`, encodeURIComponent(String(requestParameters['idEducation']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EducationToJSON(requestParameters['education']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EducationFromJSON(jsonValue));
    }

    /**
     */
    async educationUpdate(requestParameters: EducationUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Education> {
        const response = await this.educationUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
