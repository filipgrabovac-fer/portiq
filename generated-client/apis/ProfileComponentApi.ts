/* tslint:disable */
/* eslint-disable */
/**
 * PortIQ API
 * PortIQ API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  GetComponentCode,
} from '../models/index';
import {
    GetComponentCodeFromJSON,
    GetComponentCodeToJSON,
} from '../models/index';

/**
 * 
 */
export class ProfileComponentApi extends runtime.BaseAPI {

    /**
     */
    async profileComponentProfileComponentCreateRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/profile-component/profile-component/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async profileComponentProfileComponentCreate(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.profileComponentProfileComponentCreateRaw(initOverrides);
    }

    /**
     */
    async profileComponentProfileComponentDeleteCreateRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/profile-component/profile-component-delete/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async profileComponentProfileComponentDeleteCreate(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.profileComponentProfileComponentDeleteCreateRaw(initOverrides);
    }

    /**
     */
    async profileComponentProfileComponentGetCodeRetrieveRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetComponentCode>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/profile-component/profile-component-get-code/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetComponentCodeFromJSON(jsonValue));
    }

    /**
     */
    async profileComponentProfileComponentGetCodeRetrieve(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetComponentCode> {
        const response = await this.profileComponentProfileComponentGetCodeRetrieveRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async profileComponentProfileComponentUpdateCreateRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/profile-component/profile-component-update/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async profileComponentProfileComponentUpdateCreate(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.profileComponentProfileComponentUpdateCreateRaw(initOverrides);
    }

}
