/* tslint:disable */
/* eslint-disable */
/**
 * PortIQ API
 * PortIQ API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  User,
} from '../models/index';
import {
    UserFromJSON,
    UserToJSON,
} from '../models/index';

export interface UserCreateRequest {
    idUser: number;
    firstName: string;
    lastName: string;
    email: string;
    createdAt: Date;
    phoneNumber?: string | null;
    imageUrl?: string | null;
    address?: string | null;
    city?: string | null;
    state?: string | null;
    zipCode?: string | null;
    country?: string | null;
    githubUsername?: string | null;
}

export interface UserDestroyRequest {
    idUser: number;
}

export interface UserRetrieveRequest {
    idUser: number;
}

export interface UserUpdateRequest {
    idUser: number;
    firstName?: string;
    lastName?: string;
    email?: string;
    phoneNumber?: string;
    address?: string;
    city?: string;
    state?: string;
    zipCode?: string;
    country?: string;
    githubUsername?: string;
    imageUrl?: string;
}

/**
 * 
 */
export class UserApi extends runtime.BaseAPI {

    /**
     */
    async userCreateRaw(requestParameters: UserCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<User>> {
        if (requestParameters['idUser'] == null) {
            throw new runtime.RequiredError(
                'idUser',
                'Required parameter "idUser" was null or undefined when calling userCreate().'
            );
        }

        if (requestParameters['firstName'] == null) {
            throw new runtime.RequiredError(
                'firstName',
                'Required parameter "firstName" was null or undefined when calling userCreate().'
            );
        }

        if (requestParameters['lastName'] == null) {
            throw new runtime.RequiredError(
                'lastName',
                'Required parameter "lastName" was null or undefined when calling userCreate().'
            );
        }

        if (requestParameters['email'] == null) {
            throw new runtime.RequiredError(
                'email',
                'Required parameter "email" was null or undefined when calling userCreate().'
            );
        }

        if (requestParameters['createdAt'] == null) {
            throw new runtime.RequiredError(
                'createdAt',
                'Required parameter "createdAt" was null or undefined when calling userCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
            { contentType: 'application/x-www-form-urlencoded' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['idUser'] != null) {
            formParams.append('id_user', requestParameters['idUser'] as any);
        }

        if (requestParameters['firstName'] != null) {
            formParams.append('first_name', requestParameters['firstName'] as any);
        }

        if (requestParameters['lastName'] != null) {
            formParams.append('last_name', requestParameters['lastName'] as any);
        }

        if (requestParameters['email'] != null) {
            formParams.append('email', requestParameters['email'] as any);
        }

        if (requestParameters['phoneNumber'] != null) {
            formParams.append('phone_number', requestParameters['phoneNumber'] as any);
        }

        if (requestParameters['imageUrl'] != null) {
            formParams.append('image_url', requestParameters['imageUrl'] as any);
        }

        if (requestParameters['address'] != null) {
            formParams.append('address', requestParameters['address'] as any);
        }

        if (requestParameters['city'] != null) {
            formParams.append('city', requestParameters['city'] as any);
        }

        if (requestParameters['state'] != null) {
            formParams.append('state', requestParameters['state'] as any);
        }

        if (requestParameters['zipCode'] != null) {
            formParams.append('zip_code', requestParameters['zipCode'] as any);
        }

        if (requestParameters['country'] != null) {
            formParams.append('country', requestParameters['country'] as any);
        }

        if (requestParameters['createdAt'] != null) {
            formParams.append('created_at', (requestParameters['createdAt'] as any).toISOString());
        }

        if (requestParameters['githubUsername'] != null) {
            formParams.append('github_username', requestParameters['githubUsername'] as any);
        }

        const response = await this.request({
            path: `/api/user/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserFromJSON(jsonValue));
    }

    /**
     */
    async userCreate(requestParameters: UserCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<User> {
        const response = await this.userCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async userDestroyRaw(requestParameters: UserDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['idUser'] == null) {
            throw new runtime.RequiredError(
                'idUser',
                'Required parameter "idUser" was null or undefined when calling userDestroy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/user/{id_user}/`.replace(`{${"id_user"}}`, encodeURIComponent(String(requestParameters['idUser']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async userDestroy(requestParameters: UserDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.userDestroyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async userListRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<User>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/user/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UserFromJSON));
    }

    /**
     */
    async userList(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<User>> {
        const response = await this.userListRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async userRetrieveRaw(requestParameters: UserRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<User>> {
        if (requestParameters['idUser'] == null) {
            throw new runtime.RequiredError(
                'idUser',
                'Required parameter "idUser" was null or undefined when calling userRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/user/{id_user}/`.replace(`{${"id_user"}}`, encodeURIComponent(String(requestParameters['idUser']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserFromJSON(jsonValue));
    }

    /**
     */
    async userRetrieve(requestParameters: UserRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<User> {
        const response = await this.userRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async userUpdateRaw(requestParameters: UserUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<User>> {
        if (requestParameters['idUser'] == null) {
            throw new runtime.RequiredError(
                'idUser',
                'Required parameter "idUser" was null or undefined when calling userUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
            { contentType: 'application/x-www-form-urlencoded' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['firstName'] != null) {
            formParams.append('first_name', requestParameters['firstName'] as any);
        }

        if (requestParameters['lastName'] != null) {
            formParams.append('last_name', requestParameters['lastName'] as any);
        }

        if (requestParameters['email'] != null) {
            formParams.append('email', requestParameters['email'] as any);
        }

        if (requestParameters['phoneNumber'] != null) {
            formParams.append('phone_number', requestParameters['phoneNumber'] as any);
        }

        if (requestParameters['address'] != null) {
            formParams.append('address', requestParameters['address'] as any);
        }

        if (requestParameters['city'] != null) {
            formParams.append('city', requestParameters['city'] as any);
        }

        if (requestParameters['state'] != null) {
            formParams.append('state', requestParameters['state'] as any);
        }

        if (requestParameters['zipCode'] != null) {
            formParams.append('zip_code', requestParameters['zipCode'] as any);
        }

        if (requestParameters['country'] != null) {
            formParams.append('country', requestParameters['country'] as any);
        }

        if (requestParameters['githubUsername'] != null) {
            formParams.append('github_username', requestParameters['githubUsername'] as any);
        }

        if (requestParameters['imageUrl'] != null) {
            formParams.append('image_url', requestParameters['imageUrl'] as any);
        }

        const response = await this.request({
            path: `/api/user/{id_user}/`.replace(`{${"id_user"}}`, encodeURIComponent(String(requestParameters['idUser']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserFromJSON(jsonValue));
    }

    /**
     */
    async userUpdate(requestParameters: UserUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<User> {
        const response = await this.userUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async userUserIdRetrieveRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<User>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/user/user-id/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserFromJSON(jsonValue));
    }

    /**
     */
    async userUserIdRetrieve(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<User> {
        const response = await this.userUserIdRetrieveRaw(initOverrides);
        return await response.value();
    }

}
