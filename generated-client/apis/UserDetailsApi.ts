/* tslint:disable */
/* eslint-disable */
/**
 * PortIQ API
 * PortIQ API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  UserDetails,
  UserLoggedIn,
} from '../models/index';
import {
    UserDetailsFromJSON,
    UserDetailsToJSON,
    UserLoggedInFromJSON,
    UserLoggedInToJSON,
} from '../models/index';

export interface UserDetailsUserDetailsRetrieveRequest {
    userId: string;
}

/**
 * 
 */
export class UserDetailsApi extends runtime.BaseAPI {

    /**
     */
    async userDetailsExportUserDataRetrieveRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserDetails>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/user-details/export-user-data/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserDetailsFromJSON(jsonValue));
    }

    /**
     */
    async userDetailsExportUserDataRetrieve(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserDetails> {
        const response = await this.userDetailsExportUserDataRetrieveRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async userDetailsUserDetailsRetrieveRaw(requestParameters: UserDetailsUserDetailsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserDetails>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling userDetailsUserDetailsRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/user-details/user-details/{userId}/`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserDetailsFromJSON(jsonValue));
    }

    /**
     */
    async userDetailsUserDetailsRetrieve(requestParameters: UserDetailsUserDetailsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserDetails> {
        const response = await this.userDetailsUserDetailsRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async userDetailsUserLoggedInRetrieveRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserLoggedIn>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/user-details/user-logged-in/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserLoggedInFromJSON(jsonValue));
    }

    /**
     */
    async userDetailsUserLoggedInRetrieve(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserLoggedIn> {
        const response = await this.userDetailsUserLoggedInRetrieveRaw(initOverrides);
        return await response.value();
    }

}
