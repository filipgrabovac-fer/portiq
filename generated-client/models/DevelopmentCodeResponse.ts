/* tslint:disable */
/* eslint-disable */
/**
 * PortIQ API
 * PortIQ API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Code } from './Code';
import {
    CodeFromJSON,
    CodeFromJSONTyped,
    CodeToJSON,
    CodeToJSONTyped,
} from './Code';

/**
 * 
 * @export
 * @interface DevelopmentCodeResponse
 */
export interface DevelopmentCodeResponse {
    /**
     * 
     * @type {Array<Code>}
     * @memberof DevelopmentCodeResponse
     */
    info: Array<Code>;
    /**
     * 
     * @type {Array<Code>}
     * @memberof DevelopmentCodeResponse
     */
    skills: Array<Code>;
    /**
     * 
     * @type {Array<Code>}
     * @memberof DevelopmentCodeResponse
     */
    languages: Array<Code>;
    /**
     * 
     * @type {Array<Code>}
     * @memberof DevelopmentCodeResponse
     */
    projects: Array<Code>;
    /**
     * 
     * @type {Array<Code>}
     * @memberof DevelopmentCodeResponse
     */
    certificates: Array<Code>;
    /**
     * 
     * @type {Array<Code>}
     * @memberof DevelopmentCodeResponse
     */
    education: Array<Code>;
    /**
     * 
     * @type {Array<Code>}
     * @memberof DevelopmentCodeResponse
     */
    hobbies: Array<Code>;
    /**
     * 
     * @type {Array<Code>}
     * @memberof DevelopmentCodeResponse
     */
    other: Array<Code>;
    /**
     * 
     * @type {Array<Code>}
     * @memberof DevelopmentCodeResponse
     */
    references: Array<Code>;
    /**
     * 
     * @type {Array<Code>}
     * @memberof DevelopmentCodeResponse
     */
    workExperiences: Array<Code>;
    /**
     * 
     * @type {Array<Code>}
     * @memberof DevelopmentCodeResponse
     */
    githubData: Array<Code>;
}

/**
 * Check if a given object implements the DevelopmentCodeResponse interface.
 */
export function instanceOfDevelopmentCodeResponse(value: object): value is DevelopmentCodeResponse {
    if (!('info' in value) || value['info'] === undefined) return false;
    if (!('skills' in value) || value['skills'] === undefined) return false;
    if (!('languages' in value) || value['languages'] === undefined) return false;
    if (!('projects' in value) || value['projects'] === undefined) return false;
    if (!('certificates' in value) || value['certificates'] === undefined) return false;
    if (!('education' in value) || value['education'] === undefined) return false;
    if (!('hobbies' in value) || value['hobbies'] === undefined) return false;
    if (!('other' in value) || value['other'] === undefined) return false;
    if (!('references' in value) || value['references'] === undefined) return false;
    if (!('workExperiences' in value) || value['workExperiences'] === undefined) return false;
    if (!('githubData' in value) || value['githubData'] === undefined) return false;
    return true;
}

export function DevelopmentCodeResponseFromJSON(json: any): DevelopmentCodeResponse {
    return DevelopmentCodeResponseFromJSONTyped(json, false);
}

export function DevelopmentCodeResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): DevelopmentCodeResponse {
    if (json == null) {
        return json;
    }
    return {
        
        'info': ((json['info'] as Array<any>).map(CodeFromJSON)),
        'skills': ((json['skills'] as Array<any>).map(CodeFromJSON)),
        'languages': ((json['languages'] as Array<any>).map(CodeFromJSON)),
        'projects': ((json['projects'] as Array<any>).map(CodeFromJSON)),
        'certificates': ((json['certificates'] as Array<any>).map(CodeFromJSON)),
        'education': ((json['education'] as Array<any>).map(CodeFromJSON)),
        'hobbies': ((json['hobbies'] as Array<any>).map(CodeFromJSON)),
        'other': ((json['other'] as Array<any>).map(CodeFromJSON)),
        'references': ((json['references'] as Array<any>).map(CodeFromJSON)),
        'workExperiences': ((json['work_experiences'] as Array<any>).map(CodeFromJSON)),
        'githubData': ((json['github_data'] as Array<any>).map(CodeFromJSON)),
    };
}

export function DevelopmentCodeResponseToJSON(json: any): DevelopmentCodeResponse {
    return DevelopmentCodeResponseToJSONTyped(json, false);
}

export function DevelopmentCodeResponseToJSONTyped(value?: DevelopmentCodeResponse | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'info': ((value['info'] as Array<any>).map(CodeToJSON)),
        'skills': ((value['skills'] as Array<any>).map(CodeToJSON)),
        'languages': ((value['languages'] as Array<any>).map(CodeToJSON)),
        'projects': ((value['projects'] as Array<any>).map(CodeToJSON)),
        'certificates': ((value['certificates'] as Array<any>).map(CodeToJSON)),
        'education': ((value['education'] as Array<any>).map(CodeToJSON)),
        'hobbies': ((value['hobbies'] as Array<any>).map(CodeToJSON)),
        'other': ((value['other'] as Array<any>).map(CodeToJSON)),
        'references': ((value['references'] as Array<any>).map(CodeToJSON)),
        'work_experiences': ((value['workExperiences'] as Array<any>).map(CodeToJSON)),
        'github_data': ((value['githubData'] as Array<any>).map(CodeToJSON)),
    };
}

